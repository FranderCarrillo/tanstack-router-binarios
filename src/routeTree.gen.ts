/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProtectedRoutesImport } from './routes/protectedRoutes'
import { Route as NavigationImport } from './routes/navigation'
import { Route as InstalationImport } from './routes/instalation'
import { Route as ApiImplementationImport } from './routes/apiImplementation'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const ProtectedRoutesRoute = ProtectedRoutesImport.update({
  id: '/protectedRoutes',
  path: '/protectedRoutes',
  getParentRoute: () => rootRoute,
} as any)

const NavigationRoute = NavigationImport.update({
  id: '/navigation',
  path: '/navigation',
  getParentRoute: () => rootRoute,
} as any)

const InstalationRoute = InstalationImport.update({
  id: '/instalation',
  path: '/instalation',
  getParentRoute: () => rootRoute,
} as any)

const ApiImplementationRoute = ApiImplementationImport.update({
  id: '/apiImplementation',
  path: '/apiImplementation',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/apiImplementation': {
      id: '/apiImplementation'
      path: '/apiImplementation'
      fullPath: '/apiImplementation'
      preLoaderRoute: typeof ApiImplementationImport
      parentRoute: typeof rootRoute
    }
    '/instalation': {
      id: '/instalation'
      path: '/instalation'
      fullPath: '/instalation'
      preLoaderRoute: typeof InstalationImport
      parentRoute: typeof rootRoute
    }
    '/navigation': {
      id: '/navigation'
      path: '/navigation'
      fullPath: '/navigation'
      preLoaderRoute: typeof NavigationImport
      parentRoute: typeof rootRoute
    }
    '/protectedRoutes': {
      id: '/protectedRoutes'
      path: '/protectedRoutes'
      fullPath: '/protectedRoutes'
      preLoaderRoute: typeof ProtectedRoutesImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/apiImplementation': typeof ApiImplementationRoute
  '/instalation': typeof InstalationRoute
  '/navigation': typeof NavigationRoute
  '/protectedRoutes': typeof ProtectedRoutesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/apiImplementation': typeof ApiImplementationRoute
  '/instalation': typeof InstalationRoute
  '/navigation': typeof NavigationRoute
  '/protectedRoutes': typeof ProtectedRoutesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/apiImplementation': typeof ApiImplementationRoute
  '/instalation': typeof InstalationRoute
  '/navigation': typeof NavigationRoute
  '/protectedRoutes': typeof ProtectedRoutesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/apiImplementation'
    | '/instalation'
    | '/navigation'
    | '/protectedRoutes'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/apiImplementation'
    | '/instalation'
    | '/navigation'
    | '/protectedRoutes'
  id:
    | '__root__'
    | '/'
    | '/apiImplementation'
    | '/instalation'
    | '/navigation'
    | '/protectedRoutes'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApiImplementationRoute: typeof ApiImplementationRoute
  InstalationRoute: typeof InstalationRoute
  NavigationRoute: typeof NavigationRoute
  ProtectedRoutesRoute: typeof ProtectedRoutesRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiImplementationRoute: ApiImplementationRoute,
  InstalationRoute: InstalationRoute,
  NavigationRoute: NavigationRoute,
  ProtectedRoutesRoute: ProtectedRoutesRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/apiImplementation",
        "/instalation",
        "/navigation",
        "/protectedRoutes"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/apiImplementation": {
      "filePath": "apiImplementation.tsx"
    },
    "/instalation": {
      "filePath": "instalation.tsx"
    },
    "/navigation": {
      "filePath": "navigation.tsx"
    },
    "/protectedRoutes": {
      "filePath": "protectedRoutes.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
